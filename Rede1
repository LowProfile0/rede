import socket
import random
import cryptography

class Node:
    def __init__(self, address, port):
        self.address = address
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.bind((self.address, self.port))
        self.socket.listen(1)

    def accept(self):
        conn, addr = self.socket.accept()
        return conn

    def send(self, data):
        self.socket.sendall(data)

    def receive(self):
        data = self.socket.recv(1024)
        return data

def get_next_hop(current_hop, destination):
    nodes = [Node("192.168.1.1", 8080), Node("192.168.1.2", 8081), Node("192.168.1.3", 8082)]
    next_hop = nodes[random.randint(0, len(nodes) - 1)]
    while next_hop == current_hop:
        next_hop = nodes[random.randint(0, len(nodes) - 1)]
    return next_hop

def route(data, source, destination):
    current_hop = source
    while current_hop != destination:
        next_hop = get_next_hop(current_hop, destination)
        current_hop.send(data)
        data = next_hop.receive()
    return data

def encrypt(data, key):
    cipher = cryptography.hazmat.primitives.ciphers.Cipher(key, cryptography.hazmat.primitives.algorithms.AES(256))
    encryptor = cipher.encryptor()
    return encryptor.update(data) + encryptor.finalize()

def decrypt(data, key):
    cipher = cryptography.hazmat.primitives.ciphers.Cipher(key, cryptography.hazmat.primitives.algorithms.AES(256))
    decryptor = cipher.decryptor()
    return decryptor.update(data) + decryptor.finalize()

def main():
    # Cria o nó de origem
    source = Node("192.168.1.4", 8083)

    # Cria o nó de destino
    destination = Node("192.168.1.5", 8084)

    # Gera os dados a serem enviados
    data = "Hello, world!"

    # Criptografa os dados
    data = encrypt(data, "my-secret-key")

    # Envia os dados
    source.send(data)

    # Descriptografa os dados
    data = decrypt(data, "my-secret-key")

    # Imprime os dados recebidos
    print(data)

if __name__ == "__main__":
    main()
